/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Data.hpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/18 08:57:10 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 14:58:46 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef DATA_HPP
# define DATA_HPP

# include <iomanip>
# include <list>
# include <stdio.h>
# include <stdlib.h>
# include <iostream>
# include <string>
# include <vector>
# include <map>
# include <algorithm>
#include <queue>
#include <cmath>

class Data
{
public:

	Data(void);
	Data(const Data &src);
	~Data(void);

	int									my_base_index;
	int									number_of_cells;
	int									total_ants;
	int									max_dist;
	std::vector<int>					res_by_dist;
	std::vector<int>					egg_by_dist;
	std::vector<std::vector<int> >		conexions;
	std::map<int, std::vector<int> >	data_of_cells;

protected:

private:

};

#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   header.hpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/02 15:12:11 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 15:21:31 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef HEADER_HPP
# define HEADER_HPP

# include <iomanip>
# include <list>
# include <stdio.h>
# include <stdlib.h>
# include <iostream>
# include <string>
# include <vector>
# include <map>
# include <algorithm>
#include <queue>
#include <cmath>

using namespace std;


void				start(Data &stock_data);
void				start_2(Data &stock_data);
void				algorithme_bfs(Data& stock_data, int origin, int max_dist);
std::pair<int, int>	algorithme_bfs_stop_first(Data& stock_data, int origin, int max_dist);
void				debug(Data &stock_data);


#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Data.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/18 08:58:53 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 14:58:51 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/*   CONSTRUCTEUR															  */
/*                                                                            */
/* ************************************************************************** */
Data::Data(void)
{
	this->my_base_index = 0;
	this->number_of_cells = 0;
	this->total_ants = 0;
	this->max_dist = 0;
}

/*   COPY CONSTRUCTEUR   **************************************************** */

Data::Data(const Data &src)
{
	(void)src;
}

/* ************************************************************************** */
/*                                                                            */
/*   DESTRUCTEUR															  */
/*                                                                            */
/* ************************************************************************** */
Data::~Data(void)
{
}

/* ************************************************************************** */
/*                                                                            */
/*   OPÉRATEUR																  */
/*                                                                            */
/* ************************************************************************** */

/*   OPÉRATEUR INTERNE   **************************************************** */

/*   OPÉRATEUR EXTERNE   **************************************************** */

/* ************************************************************************** */
/*                                                                            */
/*   MÉTHODE																  */
/*                                                                            */
/* ************************************************************************** */

/*   MÉTHODE PUBLIC   ******************************************************* */

/*   MÉTHODE PRIVATE   ****************************************************** */

/* ************************************************************************** */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   algorithme_bfs.cpp                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/26 11:04:47 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 12:21:37 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


void algorithme_bfs(Data& stock_data, int origin, int max_dist)
{
	std::vector<bool> visited(stock_data.data_of_cells.size(), false);
	std::queue<std::pair<int, int> > bfs_queue;

	bfs_queue.push(std::pair<int, int>(origin, 0));
	visited[origin] = true;

	while (!bfs_queue.empty())
	{
		int index = bfs_queue.front().first;
		int dist = bfs_queue.front().second;
		bfs_queue.pop();

		stock_data.data_of_cells[index][8] = dist;
		cerr << index << " = " << dist << endl;

		if (dist < max_dist)
		{
			std::vector<int>	stock;
			
			stock_data.res_by_dist.push_back(0);
			stock_data.egg_by_dist.push_back(0);
			stock_data.conexions.push_back(stock);
			for (int j = 0; j < 6; j++)
			{
				int neighbor = stock_data.data_of_cells[index][j];
				if (neighbor != -1 && !visited[neighbor])
				{
					bfs_queue.push(std::pair<int, int>(neighbor, dist + 1));
					visited[neighbor] = true;
				}
			}
		}
	}
}

std::pair<int, int>	algorithme_bfs_stop_first(Data& stock_data, int origin, int max_dist)
{
	std::vector<bool> visited(stock_data.data_of_cells.size(), false);
	std::queue<std::pair<int, int> > bfs_queue;

	bfs_queue.push(std::pair<int, int>(origin, 0));
	visited[origin] = true;

	while (!bfs_queue.empty())
	{
		int index = bfs_queue.front().first;
		int dist = bfs_queue.front().second;
		bfs_queue.pop();

		cerr << index << " = " << dist << endl;

		if (dist < max_dist)
		{
			for (int j = 0; j < 6; j++)
			{
				int neighbor = stock_data.data_of_cells[index][j];
				if (neighbor != -1 && !visited[neighbor])
				{
					bfs_queue.push(std::pair<int, int>(neighbor, dist + 1));
					visited[neighbor] = true;
					if (stock_data.data_of_cells[neighbor][6] == 2 && stock_data.data_of_cells[neighbor][9] > 0 && stock_data.data_of_cells[neighbor][8] < 4)
						return (std::pair<int, int>(neighbor, dist + 1));
				}
			}
		}
	}
	return (std::pair<int, int>(-1, -1));
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   start.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 19:49:48 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 15:18:57 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


void	start(Data &stock_data)
{
	cerr << "Start strat" << endl;
	cin >> stock_data.number_of_cells; cin.ignore();
	for (int i = 0; i < stock_data.number_of_cells; i++)
	{
		int type;				// 0 for empty, 1 for eggs, 2 for crystal
		int initial_resources;	// the initial amount of eggs/crystals on this cell
		int neigh_0;			// the index of the neighbouring cell for each direction or -1
		int neigh_1;
		int neigh_2;
		int neigh_3;
		int neigh_4;
		int neigh_5;
		cin
			>> type
			>> initial_resources
			>> neigh_0
			>> neigh_1
			>> neigh_2
			>> neigh_3
			>> neigh_4
			>> neigh_5;
		cin.ignore();
		stock_data.data_of_cells[i].push_back(neigh_0);				// [0]
		stock_data.data_of_cells[i].push_back(neigh_1);				// [1]
		stock_data.data_of_cells[i].push_back(neigh_2);				// [2]
		stock_data.data_of_cells[i].push_back(neigh_3);				// [3]
		stock_data.data_of_cells[i].push_back(neigh_4);				// [4]
		stock_data.data_of_cells[i].push_back(neigh_5);				// [5]
		stock_data.data_of_cells[i].push_back(type);				// [6]
		stock_data.data_of_cells[i].push_back(initial_resources);	// [7]
		stock_data.data_of_cells[i].push_back(-1);					// [8]  distance from my base
																	// [9]  resources
																	// [10] my_ants
																	// [11] opp_ants
		stock_data.data_of_cells[i].push_back(-1);					// [12] case conected
	}

	int number_of_bases;
	cin >> number_of_bases; cin.ignore();

	for (int i = 0; i < number_of_bases; i++)
	{
		cin >> stock_data.my_base_index; cin.ignore();
	}

	for (int i = 0; i < number_of_bases; i++)
	{
		int opp_base_index;
		cin >> opp_base_index; cin.ignore();
	}

	cerr << "Start bfs" << endl;
	algorithme_bfs(stock_data, stock_data.my_base_index, 20);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   start_2.cpp                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/26 14:56:53 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 15:18:08 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


void	start_2(Data &stock_data)
{
	for (int i = 0; i < stock_data.number_of_cells; i++)
	{
		int resources;	// la quantité actuelle d'oeufs/cristaux sur cette cellule
		int my_ants;	// le montant de vos fourmis sur cette cellule
		int opp_ants;	// la quantité de fourmis adverses sur cette cellule
		cin
			>> resources
			>> my_ants
			>> opp_ants;
		cin.ignore();
		stock_data.data_of_cells[i][9] = resources;
		stock_data.data_of_cells[i][10] = my_ants;
		stock_data.data_of_cells[i][11] = opp_ants;
		stock_data.total_ants += my_ants;
		if (resources > 0
			&& stock_data.data_of_cells[i][6] == 2
			&& stock_data.data_of_cells[i][8] > 0)							// [6] type == crystal [8] dist_from_base > 0
			stock_data.res_by_dist[stock_data.data_of_cells[i][8]] += 1;
		else if (resources > 0 && stock_data.data_of_cells[i][6] == 1)		// [6] type == egg
			stock_data.egg_by_dist[stock_data.data_of_cells[i][8]] += 1;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   debug.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/26 15:20:15 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 15:21:03 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */



void	debug(Data &stock_data)
{
	cerr << "total_ants :\t"<< stock_data.total_ants << endl;
	cerr << "res_by_dist :\t";
	for (unsigned long int i = 0; i < stock_data.res_by_dist.size(); i++)
	{
		cerr << stock_data.res_by_dist[i] << " ";
		stock_data.res_by_dist[i] = 0;
	}
	cerr << endl;
	cerr << "egg_by_dist :\t";
	for (unsigned long int i = 0; i < stock_data.egg_by_dist.size(); i++)
	{
		cerr << stock_data.egg_by_dist[i] << " ";
		stock_data.egg_by_dist[i] = 0;
	}
	cerr << endl;
	cerr << "conexion :\n";
	for (unsigned long int i = 0; i < stock_data.conexions.size(); i++)
	{
		if (!stock_data.conexions[i].empty())
		{
			cerr << i << " :\t";
			for (unsigned long int j = 0; j < stock_data.conexions[i].size(); j++)
			{
				cerr << stock_data.conexions[i][j] << " ";
				stock_data.conexions[i].erase(stock_data.conexions[i].begin() + j);
			}
			cerr << "\n";
		}
	}
	cerr << endl;
	cout << endl;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 19:46:21 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/26 15:20:50 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


void	print_by_step(Data& stock_data);

int main()
{
	Data	stock_data;

	cerr << "Start main" << endl;
	start(stock_data);
	while (1)
	{	
		start_2(stock_data);

		print_by_step(stock_data);

	
	}
}

bool	find_conexion(Data& stock_data, int src_index, int chr_index)
{
	cerr << "+-------+\n";
	cerr << src_index << " " << chr_index << endl;
	for (unsigned long int j = 0; j < stock_data.conexions[src_index].size(); j++)
	{
		if (stock_data.conexions[src_index][j] == chr_index)
		{
			cerr << "+---1---+\n";
			return (true);
		}
	}
	cerr << "+---0---+\n";
	return (false);
}

void	print_by_step(Data& stock_data)
{
	cerr << "print_by_step :\t";
	for (unsigned long int i = 1; i < stock_data.res_by_dist.size(); i++)
	{
		if (stock_data.egg_by_dist[i] > 0 && i < 2)
		{
			cerr << "X" << endl;
			for (unsigned long int j = 0; j < stock_data.data_of_cells.size(); j++)
				if (stock_data.data_of_cells[j][8] == i && stock_data.data_of_cells[j][9] > 0 && stock_data.data_of_cells[j][6] == 1)
					cout << "LINE" << " " << stock_data.my_base_index << " " << j << " " << "1" << ";";
			return ;
		}
		if (stock_data.res_by_dist[i] > 0)
		{
			cerr << "O" << endl;
			for (unsigned long int j = 0; j < stock_data.data_of_cells.size(); j++)
			{
				if (stock_data.data_of_cells[j][8] == i && stock_data.data_of_cells[j][9] > 0 && stock_data.data_of_cells[j][6] == 2)
				{
					int	power;

					power = 1;
//					if (stock_data.data_of_cells[j][11] >= stock_data.data_of_cells[j][10] && stock_data.res_by_dist[i] == 1 && stock_data.data_of_cells[j][8] < 4)
//						power+= 1;
//					if (stock_data.data_of_cells[j][11] >= stock_data.data_of_cells[j][10] && stock_data.data_of_cells[j][8] < 3)
//						power+= 1;
					std::pair<int, int>	stock;

					stock = algorithme_bfs_stop_first(stock_data, j, 20);
					if (stock.first != -1 && stock.second <= stock_data.data_of_cells[j][8] && !find_conexion(stock_data, stock.first, j))
					{
						cout << "LINE" << " " << j << " " << stock.first << " " << power + 100 << ";";
						stock_data.conexions[j].push_back(stock.first);
					}
					else
					{
						cout << "LINE" << " " << stock_data.my_base_index << " " << j << " " << power + 100 << ";";
						stock_data.conexions[j].push_back(stock_data.my_base_index);
					}
					cerr << "debug : " <<  j << " : " << "[" << stock.first << "]" << stock.second << " < " << stock_data.data_of_cells[j][8] << " " << (stock.second <= stock_data.data_of_cells[j][8]) << endl;
				}
				if (stock_data.data_of_cells[j][8] == i && stock_data.data_of_cells[j][9] > 0 && stock_data.data_of_cells[j][6] == 1)
					cout << "BEACON" << " " << j << " " << "1" << ";";
			}
		}
		cerr << i << " ";
	}
	cerr << endl;
}

//		WAIT
//		LINE <sourceIdx> <targetIdx> <strength>
//		BEACON <cellIdx> <strength>
//		MESSAGE <text

//		stock_data.data_of_cells[i].push_back(neigh_0);				// [0]
//		stock_data.data_of_cells[i].push_back(neigh_1);				// [1]
//		stock_data.data_of_cells[i].push_back(neigh_2);				// [2]
//		stock_data.data_of_cells[i].push_back(neigh_3);				// [3]
//		stock_data.data_of_cells[i].push_back(neigh_4);				// [4]
//		stock_data.data_of_cells[i].push_back(neigh_5);				// [5]
//		stock_data.data_of_cells[i].push_back(type);				// [6]
//		stock_data.data_of_cells[i].push_back(initial_resources);	// [7]
//		stock_data.data_of_cells[i].push_back(-1);					// [8]  distance from my base
//																	// [9]  resources
//																	// [10] my_ants
//																	// [11] opp_ants
//		stock_data.data_of_cells[i].push_back(-1);					// [12] case conected
