/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Data.hpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/18 08:57:10 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/25 23:41:07 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef DATA_HPP
# define DATA_HPP

# include <iomanip>
# include <list>
# include <stdio.h>
# include <stdlib.h>
# include <iostream>
# include <string>
# include <vector>
# include <map>
# include <algorithm>
#include <queue>

class Data
{
public:

	Data(void);
	Data(const Data &src);
	~Data(void);

	int								my_base_index;
	int								number_of_cells;
	std::map<int, std::vector<int>>	data_of_cells;

	int								get_index_base(void);

protected:

private:

};

#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   header.hpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/02 15:12:11 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/25 23:41:01 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef HEADER_HPP
# define HEADER_HPP

# include <iomanip>
# include <list>
# include <stdio.h>
# include <stdlib.h>
# include <iostream>
# include <string>
# include <vector>
# include <map>
# include <algorithm>
#include <queue>

using namespace std;


void	start(Data &stock_data);

#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Data.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/18 08:58:53 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/25 21:06:31 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/*   CONSTRUCTEUR															  */
/*                                                                            */
/* ************************************************************************** */
Data::Data(void)
{
	this->my_base_index = 0;
	number_of_cells = 0;
}

/*   COPY CONSTRUCTEUR   **************************************************** */

Data::Data(const Data &src)
{
	(void)src;
}

/* ************************************************************************** */
/*                                                                            */
/*   DESTRUCTEUR															  */
/*                                                                            */
/* ************************************************************************** */
Data::~Data(void)
{
}

/* ************************************************************************** */
/*                                                                            */
/*   OPÉRATEUR																  */
/*                                                                            */
/* ************************************************************************** */

/*   OPÉRATEUR INTERNE   **************************************************** */

/*   OPÉRATEUR EXTERNE   **************************************************** */

/* ************************************************************************** */
/*                                                                            */
/*   MÉTHODE																  */
/*                                                                            */
/* ************************************************************************** */

/*   MÉTHODE PUBLIC   ******************************************************* */

int	Data::get_index_base(void)
{
	int	i;

	i = 0;
	return (i);	
}

/*   MÉTHODE PRIVATE   ****************************************************** */

/* ************************************************************************** */
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   start.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 19:49:48 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/25 23:45:42 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


int	compare_vector_int(std::vector<int> &vect, int cmp)
{
//	cerr << "+-------+" << endl;
	for (int i = 0; i < vect.size(); i++)
	{
//		cerr << vect[i] << " - " << cmp << endl;
		if (vect[i] == cmp)
		{
//			cerr << "+---1---+" << endl;
			return (cmp);
		}
	}
//	cerr << "+---X---+" << endl;
	return (-1);
}

//void	recursive_dist_from_base(Data &stock_data, std::vector<int> &save_index, int index, int dist)
//{
//	if (dist == 0)
//		stock_data.data_of_cells[index][8] = 0;
//	dist++;
//	for (int j = 0; j < 6; j++)
//	{
//		if (stock_data.data_of_cells[index][j] > -1
//			&& compare_vector_int(save_index, stock_data.data_of_cells[index][j]) == -1)
//		{
//			stock_data.data_of_cells[ stock_data.data_of_cells[index][j] ][8] = dist;
//			save_index.push_back(stock_data.data_of_cells[index][j]);
//			cerr << index << "\t" << stock_data.data_of_cells[index][j] << " = " << dist << endl;
//			recursive_dist_from_base(stock_data, save_index, stock_data.data_of_cells[index][j], dist);
//		}
//	}
//}

void recursive_dist_from_base(Data& stock_data, int max_dist) {
    std::vector<bool> visited(stock_data.data_of_cells.size(), false); // Tableau pour marquer les cellules visitées
    std::queue<std::pair<int, int>> bfs_queue; // File d'attente pour la recherche en largeur
    bfs_queue.push({stock_data.my_base_index, 0}); // Ajouter la cellule de départ à la file d'attente
    visited[stock_data.my_base_index] = true; // Marquer la cellule de départ comme visitée

    while (!bfs_queue.empty()) {
        int index = bfs_queue.front().first;
        int dist = bfs_queue.front().second;
        bfs_queue.pop();

        stock_data.data_of_cells[index][8] = dist; // Mettre à jour la distance
		cerr << index << " = " << dist << endl;


        if (dist < max_dist) {
            for (int j = 0; j < 6; j++) {
                int neighbor = stock_data.data_of_cells[index][j];
                if (neighbor != -1 && !visited[neighbor])
				{
                    bfs_queue.push({neighbor, dist + 1}); // Ajouter le voisin à la file d'attente
                    visited[neighbor] = true; // Marquer le voisin comme visité
                }
            }
        }
    }
}


void	start(Data &stock_data)
{
	cerr << "Start strat" << endl;
	cin >> stock_data.number_of_cells; cin.ignore();
	for (int i = 0; i < stock_data.number_of_cells; i++)
	{
		int type;				// 0 for empty, 1 for eggs, 2 for crystal
		int initial_resources;	// the initial amount of eggs/crystals on this cell
		int neigh_0;			// the index of the neighbouring cell for each direction or -1
		int neigh_1;
		int neigh_2;
		int neigh_3;
		int neigh_4;
		int neigh_5;
		cin
			>> type
			>> initial_resources
			>> neigh_0
			>> neigh_1
			>> neigh_2
			>> neigh_3
			>> neigh_4
			>> neigh_5;
		cin.ignore();
		stock_data.data_of_cells[i].push_back(neigh_0);
		stock_data.data_of_cells[i].push_back(neigh_1);
		stock_data.data_of_cells[i].push_back(neigh_2);
		stock_data.data_of_cells[i].push_back(neigh_3);
		stock_data.data_of_cells[i].push_back(neigh_4);
		stock_data.data_of_cells[i].push_back(neigh_5);
		stock_data.data_of_cells[i].push_back(type);
		stock_data.data_of_cells[i].push_back(initial_resources);
		stock_data.data_of_cells[i].push_back(-1);					// distance from my base
//		cerr << i << endl;
	}

	int number_of_bases;
	cin >> number_of_bases; cin.ignore();

	for (int i = 0; i < number_of_bases; i++)
		cin >> stock_data.my_base_index; cin.ignore();

	for (int i = 0; i < number_of_bases; i++)
	{
		int opp_base_index;
		cin >> opp_base_index; cin.ignore();
	}

	std::vector<int>	save_index;
	int					dist;

	dist = 0;
	cerr << "Start recursive" << endl;
	recursive_dist_from_base(stock_data, 20);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tda-silv <tda-silv@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 19:46:21 by tda-silv          #+#    #+#             */
/*   Updated: 2023/05/25 22:14:54 by tda-silv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


int main()
{
	Data	stock_data;
	std::vector<int>				RESS_POS;
	std::map<int, std::vector<int>>	mapVariables;

	cerr << "Start main" << endl;
	start(stock_data);
	while (1)
	{
		for (int i = 0; i < stock_data.number_of_cells; i++)
		{
			int resources; // the current amount of eggs/crystals on this cell
			int my_ants; // the amount of your ants on this cell
			int opp_ants; // the amount of opponent ants on this cell
			cin >> resources >> my_ants >> opp_ants; cin.ignore();
			if (resources > 0)
				RESS_POS.push_back(i);
		}

		for (int i = 0; i < RESS_POS.size(); i++)
		{
			cout << "LINE" << " " << stock_data.my_base_index << " " << RESS_POS[i] << " " << "1" << ";";
		}
		cout << endl;
	}
}

//		WAIT
//		LINE <sourceIdx> <targetIdx> <strength>
//		BEACON <cellIdx> <strength>
//		MESSAGE <text
